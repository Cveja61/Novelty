/*		Master_2_Style.jsx	Bruno Herfst 2010 - 2017	Version 2.0	// 27.02.17 // Added master exceptions	An InDesign CS5 script to apply the selected master-page 	to any page that contains the searchresult.	Tested in CS6*/#target indesign;function main() {	var the_document = app.documents.item(0);	if(!the_document.isValid) {		alert("Open a document before running this script");		return;	}	// Create a list of paragraph styles	var list_of_paragraph_styles = the_document.paragraphStyles.everyItem().name;	list_of_paragraph_styles.unshift("--ANY STYLE--");	// Create a list of master pages	var list_of_master_pages = the_document.masterSpreads.everyItem().name;	list_of_master_pages.unshift("[None]");	// Make the dialog box for selecting the paragraph styles	var the_dialog = app.dialogs.add({name:"add master to pages containing style"});	with(the_dialog.dialogColumns.add()){		with(dialogRows.add()){			staticTexts.add({staticLabel:"Find:"});			var find_paragraph_drop = dropdowns.add({stringList:list_of_paragraph_styles, selectedIndex:0});			// A decorative checkbox :)			var myGREPCheckbox = checkboxControls.add({staticLabel:"Custom GREP:", checkedState:true});			var myGREPField    = textEditboxes.add({editContents:"^.+"});		}		with(dialogRows.add()){			staticTexts.add({staticLabel:"Apply "});			var change_master_drop = dropdowns.add({stringList:list_of_master_pages, selectedIndex:0});			staticTexts.add({staticLabel:" to "});			var master_offset = dropdowns.add({stringList:["Page Before", "Page", "Page After"], selectedIndex:1});		}		var myMasterCheckBoxes = new Array();		with(dialogRows.add()){			staticTexts.add({staticLabel:"Except when page is using master: "});			with(borderPanels.add()){				with(dialogColumns.add()){					for(i=0;i<list_of_master_pages.length;i++){						myMasterCheckBoxes.push( checkboxControls.add({staticLabel:list_of_master_pages[i], checkedState:false}) );					}				}			}		}		with(dialogRows.add()){			var myRMCheckbox        = checkboxControls.add({staticLabel:"Replace 'Apply masters' first with", checkedState:true});			var replace_master_drop = dropdowns.add({stringList:list_of_master_pages, selectedIndex:0});		}	}	var myResult = the_dialog.show();	if(myResult == true){		// Define variables		if (find_paragraph_drop.selectedIndex == 0) {			var find_paragraph = false;		} else {			var find_paragraph = the_document.paragraphStyles.item(find_paragraph_drop.selectedIndex-1);		}				var pageOfset = 0;		if(master_offset.selectedIndex != 1){			if(master_offset.selectedIndex > 1){				// Page After				pageOfset = 1;			} else {				// Page Before;				pageOfset = -1;			}		}				var change_master_drop_i  = change_master_drop.selectedIndex-1;		var replace_master_drop_i = replace_master_drop.selectedIndex-1;		if(change_master_drop_i >= 0) {			var change_master  = the_document.masterSpreads.item( change_master_drop_i );		} else {			var change_master  = null;		}		if(replace_master_drop_i >= 0) {			var replace_master  = the_document.masterSpreads.item( replace_master_drop_i );		} else {			var replace_master  = null;		}		var ignore_masters  = new Array();		for(var i = 0; i < myMasterCheckBoxes.length; i++){			if(myMasterCheckBoxes[i].checkedState) {				if(i-1 >= 0) {					ignore_masters.push( the_document.masterSpreads.item(i-1) );				} else {					ignore_masters.push( null );				}			}		}		var myRM   = myRMCheckbox.checkedState;		var myGREP = myGREPCheckbox.checkedState;				if(myGREP == true && myGREPField.editContents != "" && myGREPField.editContents != "^") { //Find paragraph ^ is buggy in CS5 it will only find the first one not the next			var find_what = myGREPField.editContents;		} else {			var find_what = "^.+";		}				if (myRM == true) {			// Find and replace the pages			for(var myCounter = 0; myCounter < the_document.pages.length; myCounter++){				myPage = the_document.pages.item(myCounter);				if (myPage.appliedMaster == change_master){					myPage.appliedMaster = replace_master;				}			}		}				// Set find grep preferences to find all paragraphs with the selected paragraph style		app.findChangeGrepOptions.includeFootnotes = false;		app.findChangeGrepOptions.includeHiddenLayers = false;		app.findChangeGrepOptions.includeLockedLayersForFind = false;		app.findChangeGrepOptions.includeLockedStoriesForFind = false;		app.findChangeGrepOptions.includeMasterPages = false;				app.findGrepPreferences = NothingEnum.nothing;		if(find_paragraph == false){			app.findGrepPreferences.appliedParagraphStyle = NothingEnum.nothing;		} else {			app.findGrepPreferences.appliedParagraphStyle = find_paragraph;		}		app.findGrepPreferences.findWhat = find_what;		//Search the current story		var found_paragraphs = the_document.findGrep();		var myCounter = 0;		var myMessage = 0;		var myCounterCounter = 0;		try {			if(found_paragraphs.length > 0){				do {					// Create an object reference to the found paragraph and the next					// for use in CS4 change parentPage to parent					var myDocOfset = found_paragraphs[myCounter].insertionPoints[0].parentTextFrames[0].parentPage.documentOffset;					var myPage     = the_document.pages[myDocOfset + pageOfset];					// make sure page exist					if(myPage.isValid){						var currMaster    = myPage.appliedMaster;						var replaceMaster = true;						for(var i = 0; i < ignore_masters.length; i++){							if (currMaster == ignore_masters[i]) replaceMaster = false;						}						if(replaceMaster) {							myPage.appliedMaster = change_master;						} else {							myCounterCounter += 1;						}					} else {						myCounterCounter += 1;					}					myCounter++;				} while (myCounter < found_paragraphs.length);			} else {				myMessage = "Couldn’t find anything!";			}		} catch(err) {			myMessage = err;		}			if(myMessage == 0){			var myMessage = "Done placing "+(myCounter-myCounterCounter)+" master pages!";		}				alert(myMessage);	} else {		exit();	}}main();